using System;
using System.Collections;
using UnityEditorInternal;
using UnityEngine;

namespace UnityEditor
{
	internal class LightingWindowLightmapPreviewTab
	{
		private class Styles
		{
			public GUIStyle selectedLightmapHighlight = "LightmapEditorSelectedHighlight";

			public GUIContent LightProbes = EditorGUIUtility.TextContent("Light Probes|A different LightProbes.asset can be assigned here. These assets are generated by baking a scene containing light probes.");

			public GUIContent LightingDataAsset = EditorGUIUtility.TextContent("Lighting Data Asset|A different LightingData.asset can be assigned here. These assets are generated by baking a scene in the OnDemand mode.");

			public GUIContent MapsArraySize = EditorGUIUtility.TextContent("Array Size|The length of the array of lightmaps.");
		}

		private Vector2 m_ScrollPositionLightmaps = Vector2.zero;

		private Vector2 m_ScrollPositionMaps = Vector2.zero;

		private int m_SelectedLightmap = -1;

		private static LightingWindowLightmapPreviewTab.Styles s_Styles;

		private static void DrawHeader(Rect rect, bool showdrawDirectionalityHeader, bool showShadowMaskHeader, float maxLightmaps)
		{
			rect.width /= maxLightmaps;
			EditorGUI.DropShadowLabel(rect, "Intensity");
			rect.x += rect.width;
			if (showdrawDirectionalityHeader)
			{
				EditorGUI.DropShadowLabel(rect, "Directionality");
				rect.x += rect.width;
			}
			if (showShadowMaskHeader)
			{
				EditorGUI.DropShadowLabel(rect, "Shadowmask");
			}
		}

		private void MenuSelectLightmapUsers(Rect rect, int lightmapIndex)
		{
			if (Event.current.type == EventType.ContextClick && rect.Contains(Event.current.mousePosition))
			{
				string[] texts = new string[]
				{
					"Select Lightmap Users"
				};
				Rect position = new Rect(Event.current.mousePosition.x, Event.current.mousePosition.y, 1f, 1f);
				EditorUtility.DisplayCustomMenu(position, EditorGUIUtility.TempContent(texts), -1, new EditorUtility.SelectMenuItemFunction(this.SelectLightmapUsers), lightmapIndex);
				Event.current.Use();
			}
		}

		private void SelectLightmapUsers(object userData, string[] options, int selected)
		{
			int num = (int)userData;
			ArrayList arrayList = new ArrayList();
			MeshRenderer[] array = UnityEngine.Object.FindObjectsOfType(typeof(MeshRenderer)) as MeshRenderer[];
			MeshRenderer[] array2 = array;
			for (int i = 0; i < array2.Length; i++)
			{
				MeshRenderer meshRenderer = array2[i];
				if (meshRenderer != null && meshRenderer.lightmapIndex == num)
				{
					arrayList.Add(meshRenderer.gameObject);
				}
			}
			Terrain[] array3 = UnityEngine.Object.FindObjectsOfType(typeof(Terrain)) as Terrain[];
			Terrain[] array4 = array3;
			for (int j = 0; j < array4.Length; j++)
			{
				Terrain terrain = array4[j];
				if (terrain != null && terrain.lightmapIndex == num)
				{
					arrayList.Add(terrain.gameObject);
				}
			}
			Selection.objects = (arrayList.ToArray(typeof(UnityEngine.Object)) as UnityEngine.Object[]);
		}

		public void LightmapPreview(Rect r)
		{
			if (LightingWindowLightmapPreviewTab.s_Styles == null)
			{
				LightingWindowLightmapPreviewTab.s_Styles = new LightingWindowLightmapPreviewTab.Styles();
			}
			GUI.Box(r, "", "PreBackground");
			this.m_ScrollPositionLightmaps = EditorGUILayout.BeginScrollView(this.m_ScrollPositionLightmaps, new GUILayoutOption[]
			{
				GUILayout.Height(r.height)
			});
			int num = 0;
			bool flag = false;
			bool flag2 = false;
			LightmapData[] lightmaps = LightmapSettings.lightmaps;
			for (int i = 0; i < lightmaps.Length; i++)
			{
				LightmapData lightmapData = lightmaps[i];
				if (lightmapData.lightmapDir != null)
				{
					flag = true;
				}
				if (lightmapData.shadowMask != null)
				{
					flag2 = true;
				}
			}
			float num2 = 1f;
			if (flag)
			{
				num2 += 1f;
			}
			if (flag2)
			{
				num2 += 1f;
			}
			Rect rect = GUILayoutUtility.GetRect(r.width, r.width, 20f, 20f);
			LightingWindowLightmapPreviewTab.DrawHeader(rect, flag, flag2, num2);
			LightmapData[] lightmaps2 = LightmapSettings.lightmaps;
			for (int j = 0; j < lightmaps2.Length; j++)
			{
				LightmapData lightmapData2 = lightmaps2[j];
				if (lightmapData2.lightmapColor == null && lightmapData2.lightmapDir == null && lightmapData2.shadowMask == null)
				{
					num++;
				}
				else
				{
					int num3 = (!lightmapData2.lightmapColor) ? -1 : Math.Max(lightmapData2.lightmapColor.width, lightmapData2.lightmapColor.height);
					int num4 = (!lightmapData2.lightmapDir) ? -1 : Math.Max(lightmapData2.lightmapDir.width, lightmapData2.lightmapDir.height);
					int num5 = (!lightmapData2.shadowMask) ? -1 : Math.Max(lightmapData2.shadowMask.width, lightmapData2.shadowMask.height);
					Texture2D texture2D;
					if (num3 > num4)
					{
						texture2D = ((num3 <= num5) ? lightmapData2.shadowMask : lightmapData2.lightmapColor);
					}
					else
					{
						texture2D = ((num4 <= num5) ? lightmapData2.shadowMask : lightmapData2.lightmapDir);
					}
					GUILayoutOption[] options = new GUILayoutOption[]
					{
						GUILayout.MaxWidth(r.width),
						GUILayout.MaxHeight((float)texture2D.height)
					};
					Rect aspectRect = GUILayoutUtility.GetAspectRect(num2, options);
					float num6 = 5f;
					aspectRect.width /= num2;
					aspectRect.width -= num6;
					aspectRect.x += num6 / 2f;
					EditorGUI.DrawPreviewTexture(aspectRect, lightmapData2.lightmapColor);
					this.MenuSelectLightmapUsers(aspectRect, num);
					if (lightmapData2.lightmapDir)
					{
						aspectRect.x += aspectRect.width + num6;
						EditorGUI.DrawPreviewTexture(aspectRect, lightmapData2.lightmapDir);
						this.MenuSelectLightmapUsers(aspectRect, num);
					}
					if (lightmapData2.shadowMask)
					{
						aspectRect.x += aspectRect.width + num6;
						EditorGUI.DrawPreviewTexture(aspectRect, lightmapData2.shadowMask);
						this.MenuSelectLightmapUsers(aspectRect, num);
					}
					GUILayout.Space(10f);
					num++;
				}
			}
			EditorGUILayout.EndScrollView();
		}

		public void UpdateLightmapSelection()
		{
			Terrain terrain = null;
			MeshRenderer component;
			if (Selection.activeGameObject == null || ((component = Selection.activeGameObject.GetComponent<MeshRenderer>()) == null && (terrain = Selection.activeGameObject.GetComponent<Terrain>()) == null))
			{
				this.m_SelectedLightmap = -1;
			}
			else
			{
				this.m_SelectedLightmap = ((!(component != null)) ? terrain.lightmapIndex : component.lightmapIndex);
			}
		}

		public void Maps()
		{
			if (LightingWindowLightmapPreviewTab.s_Styles == null)
			{
				LightingWindowLightmapPreviewTab.s_Styles = new LightingWindowLightmapPreviewTab.Styles();
			}
			GUI.changed = false;
			if (Lightmapping.giWorkflowMode == Lightmapping.GIWorkflowMode.OnDemand)
			{
				SerializedObject serializedObject = new SerializedObject(LightmapEditorSettings.GetLightmapSettings());
				SerializedProperty property = serializedObject.FindProperty("m_LightingDataAsset");
				EditorGUILayout.PropertyField(property, LightingWindowLightmapPreviewTab.s_Styles.LightingDataAsset, new GUILayoutOption[0]);
				serializedObject.ApplyModifiedProperties();
			}
			GUILayout.Space(10f);
			LightmapData[] lightmaps = LightmapSettings.lightmaps;
			this.m_ScrollPositionMaps = GUILayout.BeginScrollView(this.m_ScrollPositionMaps, new GUILayoutOption[0]);
			using (new EditorGUI.DisabledScope(true))
			{
				bool flag = false;
				bool flag2 = false;
				LightmapData[] array = lightmaps;
				for (int i = 0; i < array.Length; i++)
				{
					LightmapData lightmapData = array[i];
					if (lightmapData.lightmapDir != null)
					{
						flag = true;
					}
					if (lightmapData.shadowMask != null)
					{
						flag2 = true;
					}
				}
				for (int j = 0; j < lightmaps.Length; j++)
				{
					GUILayout.BeginHorizontal(new GUILayoutOption[0]);
					GUILayout.Space(5f);
					lightmaps[j].lightmapColor = this.LightmapField(lightmaps[j].lightmapColor, j);
					if (flag)
					{
						GUILayout.Space(10f);
						lightmaps[j].lightmapDir = this.LightmapField(lightmaps[j].lightmapDir, j);
					}
					if (flag2)
					{
						GUILayout.Space(10f);
						lightmaps[j].shadowMask = this.LightmapField(lightmaps[j].shadowMask, j);
					}
					GUILayout.Space(5f);
					LightmapConvergence lightmapConvergence = Lightmapping.GetLightmapConvergence(j);
					GUILayout.BeginVertical(new GUILayoutOption[0]);
					GUILayout.Label("Index: " + j, EditorStyles.miniBoldLabel, new GUILayoutOption[0]);
					if (lightmapConvergence.IsValid())
					{
						GUILayout.Label("Occupied: " + InternalEditorUtility.CountToString((ulong)((long)lightmapConvergence.occupiedTexelCount)), EditorStyles.miniLabel, new GUILayoutOption[0]);
						GUIContent content = EditorGUIUtility.TextContent(string.Concat(new object[]
						{
							"Direct: ",
							lightmapConvergence.minDirectSamples,
							" / ",
							lightmapConvergence.maxDirectSamples,
							" / ",
							lightmapConvergence.avgDirectSamples,
							"|min / max / avg samples per texel"
						}));
						GUILayout.Label(content, EditorStyles.miniLabel, new GUILayoutOption[0]);
						GUIContent content2 = EditorGUIUtility.TextContent(string.Concat(new object[]
						{
							"GI: ",
							lightmapConvergence.minGISamples,
							" / ",
							lightmapConvergence.maxGISamples,
							" / ",
							lightmapConvergence.avgGISamples,
							"|min / max / avg samples per texel"
						}));
						GUILayout.Label(content2, EditorStyles.miniLabel, new GUILayoutOption[0]);
					}
					else
					{
						GUILayout.Label("Occupied: N/A", EditorStyles.miniLabel, new GUILayoutOption[0]);
						GUILayout.Label("Direct: N/A", EditorStyles.miniLabel, new GUILayoutOption[0]);
						GUILayout.Label("GI: N/A", EditorStyles.miniLabel, new GUILayoutOption[0]);
					}
					float lightmapBakePerformance = Lightmapping.GetLightmapBakePerformance(j);
					if ((double)lightmapBakePerformance >= 0.0)
					{
						GUILayout.Label(lightmapBakePerformance.ToString("0.00") + " mrays/sec", EditorStyles.miniLabel, new GUILayoutOption[0]);
					}
					else
					{
						GUILayout.Label("N/A mrays/sec", EditorStyles.miniLabel, new GUILayoutOption[0]);
					}
					GUILayout.EndVertical();
					GUILayout.FlexibleSpace();
					GUILayout.EndHorizontal();
				}
			}
			GUILayout.EndScrollView();
		}

		private Texture2D LightmapField(Texture2D lightmap, int index)
		{
			Rect rect = GUILayoutUtility.GetRect(100f, 100f, EditorStyles.objectField);
			this.MenuSelectLightmapUsers(rect, index);
			Texture2D result = EditorGUI.ObjectField(rect, lightmap, typeof(Texture2D), false) as Texture2D;
			if (index == this.m_SelectedLightmap && Event.current.type == EventType.Repaint)
			{
				LightingWindowLightmapPreviewTab.s_Styles.selectedLightmapHighlight.Draw(rect, false, false, false, false);
			}
			return result;
		}
	}
}
